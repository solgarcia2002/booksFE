import Link from "next/link";
import Head from "next/head";
import Router from "next/router"
import React, {useEffect, useState , useRef} from "react";
import {Button, TextField, Box, Alert, Stack} from "@mui/material";
import CheckIcon from '@mui/icons-material/Check';

interface AuthorType {
  id: number
  name: string
}

const BookForm = () => {
  const [authors, setAuthors] = useState<AuthorType[]>([])
  const [currentAuthor, setCurrentAuthor] = useState<number>(0)
  const [submitMessage, setSubmitMessage] = useState<string>('')
  const [validationError, setValidationError] = useState<string[]>([])
  let bookNameRef = useRef<HTMLInputElement | null>(null)
  let bookDescriptionRef = useRef<HTMLInputElement | null>(null)
  useEffect(() => {
    const getBooks = async () => {
      const res = await fetch('http://localhost:3010/authors')
      setAuthors(await res.json())
    }
    getBooks()
  }, [])
  useEffect(() => {
    if (!authors.length) return
    setCurrentAuthor(authors[0].id)
  }, [authors])

  const handleChangeAuthor = (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedAuthor = event.target.value ?? 0;
    setCurrentAuthor(Number.parseInt(selectedAuthor))
  }
  const validateForm = () => {
    if (bookNameRef?.current?.value?.length > 2) {
      setValidationError(validationError.filter((val) => val !== 'bookName'))
    }
    else {
      const newValidationList = validationError
      newValidationList.push('bookName')
      setValidationError(newValidationList)
    }
    if (bookDescriptionRef?.current?.value?.length > 2) {
      setValidationError(validationError.filter((val) => val !== 'bookDescription'))
    }
    else {
      const newValidationList = validationError
      newValidationList.push('bookDescription')
      setValidationError(newValidationList)
    }
    return (bookNameRef && bookDescriptionRef)
  }
  const handleAddBook = () => {
    if (!validateForm()) return
    const requestOptions = {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({
        name: bookNameRef.current?.value,
        description: bookDescriptionRef.current?.value,
        authorId: currentAuthor
      })
    };
    setCurrentAuthor(authors[0].id)
    fetch('http://localhost:3010/books', requestOptions)
      .then(response => {
        setSubmitMessage('Your book has been added. You will be redirected to the list.')
        setTimeout(() => {
          setSubmitMessage('')
          Router.push('/')
        }, 3000)
      })
  }
  return <>
    <div className="container">
      <Head>
        <title>List of Books and Authors - Add Book</title>
        <meta name="description" content="Generated by Sol Garcia"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <main>
        <h1>
          Welcome to <a href="https://github.com/solgarcia2002/books">BOOK me</a>
        </h1>
        <Link href={'/'}><a> Go Back Home</a></Link>
        <Box
          component="form"
          sx={{
            '& .MuiTextField-root': {m: 1, width: '25ch'},
          }}
        >
          <div className={'formContent'}>
            <TextField
              className={'formItem'}
              id="bookName"
              label="Book Name"
              defaultValue={bookNameRef.current?.value}
              variant="standard"
              error={validationError.includes('bookName')}
              helperText="Please select the book's name"
              inputRef={bookNameRef}
            />
            <TextField
              className={'formItem'}
              multiline
              rows={4}
              id="bookDescription"
              label="Book Description"
              defaultValue={bookDescriptionRef.current?.value}
              error={validationError.includes('bookDescription')}
              variant="standard"
              helperText="Please select the book's description"
              inputRef={bookDescriptionRef}
            />
            <TextField
              className={'formItem'}
              select
              id="bookAuthor"
              label="Book's Author"
              value={currentAuthor}
              SelectProps={{
                native: true,
              }}
              onChange={handleChangeAuthor}
              helperText="Please select the book's author"
              variant="standard"
            >
              {authors.map((option: AuthorType) => (
                <option key={option.id} value={option.id}>
                  {option.name}
                </option>
              ))}
            </TextField>
            <Stack sx={{width: '100%'}} spacing={2}>
              {submitMessage && <Alert icon={<CheckIcon fontSize="inherit"/>} severity="success">
                {submitMessage}
              </Alert>}
            </Stack>
            <Button variant="contained" onClick={handleAddBook}>Submit Book</Button>
          </div>
        </Box>

      </main>
    </div>
    <style jsx>{`
      .container {
        padding: 0 2rem;
      }

      main {
        margin: 0;
        min-height: 100vh;
        padding: 4rem 0;
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }

      h1 a {
        color: #0070f3;
        text-decoration: none;
      }

      h1 a:hover,
      h1 a:focus,
      h1 a:active {
        text-decoration: underline;
      }

      h1 {
        margin: 0;
        line-height: 1.15;
        font-size: 4rem;
        text-align: center;
        font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
        Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;

      }

      .formContent {
        display: flex;
        flex-direction: column;
        width: 30rem;
      }

      .formItem {
        width: 30rem;
      }
    `}</style>
  </>
}
export default BookForm
